<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/documentation/</link><description>Recent content in Documentation on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Tue, 18 Jun 2024 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Documentation - README</title><link>https://HoshikawaRyuukou.github.io/posts/documentation-readme/</link><pubDate>Tue, 18 Jun 2024 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/documentation-readme/</guid><description>Quick Chat 最近筆者從 Unity 轉向了 Node.js，因此花了大量時間在 npm 上尋找合適的套件。大部分的 README 都寫得很清晰，但也有少數寫得難以理解。
README 是 Repository 的門面，這是毋庸置疑的。創建一個好的自述文件，可以向用戶（包括使用者和開發者）顯示基本信息，但不應該用他們可能不需要的內容來淹沒他們。
筆者認為應該從一開始就認真對待 README，而不是在最後(專案收尾之際)才一股腦地將資訊灌入，這樣會降低其品質。
Guide 你知道對專案來說，README.md 有多麼重要嗎？ ── 工程師血淚史 README 的藝術 Markdown + Vscode Markdown All in One Markdown Preview Github Styling Template README-Template.md GitHub README Templates Strategy 為誰而寫 必須意識讀文件的人分成使用者和開發者，README 在佈局上要有明確的邊界。
以使用者角度 Tutorial Reference 以開發者角度 環境設定/測試/部署/發布方法 開發流程/編碼規範等 避免 README 過長 這個視專案而定，當 README 內容越來越多時可以考慮將其拆分至其他文檔，而 README.md 則改做為文檔的索引頁。
README.md RELEASELOG.md CHANGELOG.md CONTRIBUTING.md ./docs/Tutorials/xx.md ./docs/Examples/xx.md 避免 Header 過度使用 原本寫作時會下意識的使用不少的三級標題 ### Header
## Header2 ### Header3 分段.</description></item></channel></rss>