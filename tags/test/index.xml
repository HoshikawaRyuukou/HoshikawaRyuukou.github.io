<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test on 識之箱庭</title><link>https://HoshikawaRyuukou.github.io/tags/test/</link><description>Recent content in Test on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 04 Jun 2023 21:11:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>Test - Unit Test</title><link>https://HoshikawaRyuukou.github.io/posts/test-unit-test/</link><pubDate>Sun, 04 Jun 2023 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/test-unit-test/</guid><description>以下觀點不一定適用於各專案，請因地制宜。
以反面例子來看單元測試 慢 不穩定 脆弱 不方便 問題出在不可控
希望是可控的 可重現一樣結果 以整體專案的角度來看單元測試 專案內分為 不可控 與 可控 兩部分
不可控: 檔案/資料庫/第三方套件 可控: 除不可控以外自己所寫的部分 可控內分為 不可測 與 可測 兩部分
不可測: 與不可控接觸的部分，因此會希望這部分越單純越好。 可測: 為專案內價值較高，須小心維護的部分。 目標: 可測範圍盡量大，不可測盡量小。
FAQ 單元測試相較於手動測試的優勢 ? 可以輕鬆的跑完多個 Test Cases Static 要不要測 ? 直接使用真實行為 透過測試框架強測 重構/隔離/依賴注入 Ref 一起設計出可被單元測試的程式碼吧！ [Day 2]Unit Testing 簡介 .NET Core 和 .NET Standard 的單元測試最佳做法</description></item><item><title>Test - 概述</title><link>https://HoshikawaRyuukou.github.io/posts/test-%E6%A6%82%E8%BF%B0/</link><pubDate>Sat, 03 Jun 2023 21:11:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/test-%E6%A6%82%E8%BF%B0/</guid><description>以下觀點不一定適用於各專案，請因地制宜。
在開始寫 code 之前 測試文化: 底下的人願意寫，上面的人願意給時間。 測試的順位: 從商業價值最高的功能開始。 較低的測試價值 需求尚未明朗又必須交付成果。 取決於經營者對價值的認定，其實跟程式沒多大關係。 不是所有的程式都可以測試，有時候為了測試，程式需要先重構成可以測試的樣子。 Ref 一次搞懂單元測試、整合測試、端對端測試之間的差異</description></item></channel></rss>