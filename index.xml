<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>識之箱庭</title><link>https://HoshikawaRyuukou.github.io/</link><description>Recent content on 識之箱庭</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>HoshikawaRyuukou</copyright><lastBuildDate>Sun, 06 Nov 2022 09:00:00 +0000</lastBuildDate><atom:link href="https://HoshikawaRyuukou.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>你好! Hugo</title><link>https://HoshikawaRyuukou.github.io/posts/2022-11-07-%E4%BD%A0%E5%A5%BD-hugo/</link><pubDate>Sun, 06 Nov 2022 09:00:00 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/posts/2022-11-07-%E4%BD%A0%E5%A5%BD-hugo/</guid><description>Blog 之前覺得使用 Github Repository + Markdown 當作筆記就足矣，但隨著筆記越多越雜，只使用文件夾結構做分類，在查找的時候越覺得不方便，還是需要有一套分類系統。但又不想用 Blog 平台，畢竟還是有倒站的風險在。之前就知道靜態網站能夠架在 Github 上，只是一直沒研究，剛好趁這個機會練習，順便複習一下Web 前端的技能。最後的方案是 Github Pages + Hugo。
Hugo Hugo 主打快速架站，網上的教學也很多，筆者先是快速瀏覽一下 導覽 在動工。這裡就不手把手介紹， 這主要記錄一些自己遇到的坑。
Get Started 官方的文件 Official Doc 已經足夠清楚了，照著安裝 + Quick Start 跑完就有一個完整的畫面(以靜態網站來說)，但這裡有幾個注意的點。
使用 Binary (Cross-platform) 配置 Hugo，有 hugo / hugo_extended 版本，且要手動配置環境變數。 extended 支援 Sass/SCSS，這裡沒注意花了不少時間，想說改個主題佈局怎麼編譯不過。 把 Getting Started 幾個文件就好，下面的 Content Management / Templates&amp;hellip; 可以先不用看，等有改 Theme 再回來研究即可。 Theme 主題有很多選擇 Official Link / Github Tag - hugo-theme，有已經打磨得很完善的，也有很簡單的。幾點注意
避開一些太舊的主題 (跟Hugo衝突 / js腳本過舊&amp;hellip;) FB / IG 的 API 有改過，所以有的要排除一下才能建置 我對這個筆記 Blog 希望以簡潔明快為主，最後採用這個 Theme - Cactus，之後肯定會在上面做些魔改的，不然用 Hugo 練習的意義就小很多了。近期應該會補上站內搜尋 (似乎可以使用 Fuse.</description></item><item><title>About me</title><link>https://HoshikawaRyuukou.github.io/about/</link><pubDate>Wed, 24 Aug 2016 17:51:42 +0000</pubDate><guid>https://HoshikawaRyuukou.github.io/about/</guid><description>Github: HoshikawaRyuukou</description></item></channel></rss>